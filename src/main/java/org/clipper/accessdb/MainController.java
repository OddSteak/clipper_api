package org.clipper.accessdb;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/api") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private LinksRepository linksRepository;

    @Autowired
    private CollectionRepository collectionRepository;

    @Autowired
    private CollectionUsersRepository collectionUsersRepository;

    @Autowired
    private CategoryRepository categoryRepository;

    @PostMapping(path = "/adduser") // Map ONLY POST Requests
    public @ResponseBody String addNewUser(@RequestParam String name, @RequestParam String pass) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setId(name);
        n.setPass(pass);
        userRepository.save(n);
        return "Saved";
    }

    @GetMapping(path = "/isuser")
    public @ResponseBody String isUser(@RequestParam String name) {
        var u = userRepository.findById(name);
        return Boolean.toString(u.isPresent());
    }

    @GetMapping(path = "/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @PostMapping(path = "/addcollection")
    public @ResponseBody String addNewCollection(@RequestParam String name, String user_id, String access) {
        Optional<User> u = userRepository.findById(user_id);
        colAccess acc;

        if (!u.isPresent())
            return "Invalid user id";
        try {
            acc = colAccess.valueOf(access);
        } catch (IllegalArgumentException e) {
            return "invalid access modifier";
        }

        LinkCollection col = new LinkCollection(u.get(), name, acc);
        collectionRepository.save(col);
        return "Saved";
    }

    @PostMapping(path = "/addlink")
    public @ResponseBody String addNewLink(@RequestParam Integer colId, @RequestParam String name,
            @RequestParam String url, @RequestParam String date, @RequestParam String type,
            @RequestParam String category) {
        var col = collectionRepository.findById(colId);
        if (!col.isPresent())
            return "collection doesn't exist";

        Link link = new Link(col.get(), name, url, date, type);
        linksRepository.save(link);
        var cat = new Category(link, category);
        categoryRepository.save(cat);

        return "Saved";
    }

    @GetMapping(path = "/getlinks")
    public @ResponseBody Iterable<Link> getLinks(@RequestParam Integer colId) {
        var col = collectionRepository.findById(colId);
        if (!col.isPresent()) return null;
        return linksRepository.findByColId(col.get());
    }
}
